///////////////////////////////////////////////////
//      number classes 
// implemented in provider namespace
///////////////////////////////////////////////////

class X_ManagedElement
{
    String Description;
};

class X_Number : X_ManagedElement
{
    [Key] Uint64 Number;
};

class X_SmallNumber : X_Number
{
    String SpelledNumber;

    [static] String SpellNumber(Uint64 num);

     Uint32 GetFactors(
	[out] uint64 numbers[],
	[out] string spelled_numbers[]
	);
};

class X_HugeNumber : X_Number
{
	Uint32 Magnitude;
	
	// embedded instance
	[EmbeddedInstance("X_SmallNumber")]
	String MagnitudeObj;
	
	// array of embedded instances - returns numbers 1,2,3
	[EmbeddedInstance("X_SmallNumber")]
	String Numbers123[];

    // embedded object test - returns a X_Halves '0' -> '0'
	[EmbeddedObject]
	String Number0;
    
    // embedded object test - returns two objects: X_TestObject and X_Profile
	[EmbeddedObject]
	String TwoTestObjects[];
	
	[EmbeddedInstance("X_TestObject")]
	String TestObject;
    
	String SpellMagnitude();
	
	// used for unit-testing of embedded objects as parameters
	[static, EmbeddedInstance("X_TestObject")]
	String TestEmbedded(
	    [EmbeddedObject, IN, OUT]
	    String objectsArray[],
	    [EmbeddedObject, IN, OUT]
	    String objectSingle,
	    
	    [EmbeddedInstance("X_TestObject"), in,out]
	    String testObjectsArray[],
	    [EmbeddedInstance("X_TestObject"), in,out]
	    String testObjectSingle
	);
	
};

class X_Number1000001 : X_HugeNumber
{
    Uint32 Property0;

    [static]
    string Method1();
};

class X_NumberWorld : X_ManagedElement
{
    [key] String Name;
    string Version;
    
    /* unit-test support 
        pid of provider's hosting process; effective user and group */
    uint32  pid;
    uint32  uid;
    uint32  gid;
    string  user;
    string  group;

    /* namespace parameter test */
    string ns;
    
    /* used for testing only - terminates process by 
        calling 'exit(1)' */
    [static]
    uint32  Terminate();

    /* unit-test for namespace -
        returns namespace parameter */
    [static]
    string ReturnNamespace();
};

[Association]
class X_AllNumbers
{
    [Key] X_Number      REF number;
    [Key] X_NumberWorld REF world;
};

[Association]
class X_HugeNumbers : X_AllNumbers
{
    [Key] X_HugeNumber  REF number;
    [Key] X_NumberWorld REF world;
};

[Association]
class X_OddSmallNumbers : X_AllNumbers
{
    [Key] X_SmallNumber  REF number;
    [Key] X_NumberWorld  REF world;
    
    uint64 factors[];
};

[Association]
class X_EvenSmallNumbers : X_AllNumbers
{
    [Key] X_SmallNumber    REF number;
    [Key] X_NumberWorld    REF world;
    
    uint64      factors[];
    Boolean     prime;
};

[Association]
class X_Halves
{
    [Key] X_SmallNumber  REF number;
    [Key] X_SmallNumber  REF half;
};

///////////////////////////////////////////////////
// embedded object test
class X_TestObject
{
    [key] Uint64  id;
    string  str;
    Char16  operation; // +/-*
    uint32  left_operand;
    uint32  right_operand;
    uint32  result;
};

///////////////////////////////////////////////////
//      profile 
// implemented in interop namespace
///////////////////////////////////////////////////
class X_Profile
{
    [Key] string InstanceID;
    String  RegisteredName;
};

[Association]
class X_ElementConformsToProfile
{
    [Key] X_Profile REF Profile;
    [Key] X_ManagedElement REF Element;
};

[Association]
class X_HugeNumberConformsToProfile : X_ElementConformsToProfile
{
    [Key] X_Profile REF Profile;
    [Key] X_HugeNumber REF Element;
};

[Association]
class X_NumberWorldConformsToProfile : X_ElementConformsToProfile
{
    [Key] X_Profile REF Profile;
    [Key] X_NumberWorld REF Element;
};

class X_Cat
{
    [Key] String Key;
};

class X_Dog
{
    [Static]
    Uint32 Fight(
        [In] X_Cat REF CatsIn[],
        [In(false), Out] X_Cat REF CatsOut[]);
};

class X_HTTPHeader
{
    [Key] String Name;
    String Value;
};

