/*
**==============================================================================
**
** Copyright (c) Microsoft Corporation. All rights reserved. See file LICENSE
** for license information.
**
**==============================================================================
*/

#ifndef _mof_qualifiers_h
#define _mof_qualifiers_h

#include "mofy.tab.h"

#if 0
//
// CIM-2.26.0: qualifiers.mof
//
const wchar_t cQualifiers[]=
L"// Copyright (c) 2007 DMTF.  All rights reserved.\n"
L"//===============\n"
L"//Meta Qualifiers\n"
L"//===============\n"
L"\n"
L"#pragma include (\"../common/msft_qualifiers.mof\")\n"
L"\n"
L"Qualifier Association : boolean = false, \n"
L"    Scope(association), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Indication : boolean = false, \n"
L"    Scope(class, indication), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"//===================\n"
L"//Standard Qualifiers\n"
L"//===================\n"
L"\n"
L"Qualifier Abstract : boolean = false, \n"
L"    Scope(class, association, indication), \n"
L"    Flavor(EnableOverride, Restricted);\n"
L"\n"
L"Qualifier Aggregate : boolean = false, \n"
L"    Scope(reference), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Aggregation : boolean = false, \n"
L"    Scope(association), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier ArrayType : string = \"Bag\", \n"
L"    Scope(property, parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier BitMap : string[], \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier BitValues : string[], \n"
L"    Scope(property, method, parameter), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier ClassConstraint : string[], \n"
L"    Scope(class, association, indication);\n"
L"\n"
L"Qualifier Composition : boolean = false, \n"
L"    Scope(association), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Correlatable : string[], \n"
L"    Scope(property);\n"
L"\n"
L"Qualifier Counter : boolean = false, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier Deprecated : string[], \n"
L"    Scope(any), \n"
L"    Flavor(EnableOverride, Restricted);\n"
L"\n"
L"Qualifier Description : string = null, \n"
L"    Scope(any), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier DisplayName : string = null, \n"
L"    Scope(any), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier DN : boolean = false, \n"
L"    Scope(property, method, parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier EmbeddedInstance : string = null, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier EmbeddedObject : boolean = false, \n"
L"    Scope(property, method, parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Exception : boolean = false, \n"
L"    Scope(class, indication), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Experimental : boolean = false, \n"
L"    Scope(any), \n"
L"    Flavor(EnableOverride, Restricted);\n"
L"\n"
L"Qualifier Gauge : boolean = false, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier In : boolean = true, \n"
L"    Scope(parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier IsPUnit : boolean = false, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier Key : boolean = false, \n"
L"    Scope(property, reference), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier MappingStrings : string[], \n"
L"    Scope(any);\n"
L"\n"
L"Qualifier Max : uint32 = null, \n"
L"    Scope(reference);\n"
L"\n"
L"Qualifier MaxLen : uint32 = null, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier MaxValue : sint64 = null, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier MethodConstraint : string[], \n"
L"    Scope(method);\n"
L"\n"
L"Qualifier Min : uint32 = 0, \n"
L"    Scope(reference);\n"
L"\n"
L"Qualifier MinLen : uint32 = 0, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier MinValue : sint64 = null, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier ModelCorrespondence : string[], \n"
L"    Scope(any);\n"
L"\n"
L"/*\n"
L"The Nonlocal qualifer has been removed (as an errata) as of CIM 2.3\n"
L"For more information see CR1461.\n"
L"*/\n"
L"Qualifier Nonlocal : string = null, \n"
L"    Scope(reference);\n"
L"\n"
L"/*\n"
L"The NonlocalType qualifer has been removed (as an errata) as of CIM 2.3\n"
L"For more information see CR1461.\n"
L"*/\n"
L"Qualifier NonlocalType : string = null, \n"
L"    Scope(reference);\n"
L"\n"
L"Qualifier NullValue : string = null, \n"
L"    Scope(property), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Octetstring : boolean = false, \n"
L"    Scope(property, method, parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Out : boolean = false, \n"
L"    Scope(parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Override : string = null, \n"
L"    Scope(property, reference, method), \n"
L"    Flavor(EnableOverride, Restricted);\n"
L"\n"
L"Qualifier Propagated : string = null, \n"
L"    Scope(property), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier PropertyConstraint : string[], \n"
L"    Scope(property, reference);\n"
L"\n"
L"Qualifier PUnit : string = null, \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier Read : boolean = true, \n"
L"    Scope(property);\n"
L"\n"
L"Qualifier Required : boolean = false, \n"
L"    Scope(property, reference, method, parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"//  The Revision qualifier has been deprecated. For the replacement,\n"
L"//  see the usage rule for the version qualifier in the CIM\n"
L"//  Specification.\n"
L"\n"
L"Qualifier Revision : string = null, \n"
L"    Scope(class, association, indication), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier Schema : string = null, \n"
L"    Scope(property, method), \n"
L"    Flavor(DisableOverride, ToSubclass, Translatable);\n"
L"\n"
L"/*\n"
L"The Source qualifer has been removed (as an errata) as of CIM 2.3\n"
L"For more information see CR1461.\n"
L"*/\n"
L"Qualifier Source : string = null, \n"
L"    Scope(class, association, indication);\n"
L"\n"
L"/*\n"
L"The SourceType qualifer has been removed (as an errata) as of CIM 2.3\n"
L"For more information see CR1461.\n"
L"*/\n"
L"Qualifier SourceType : string = null, \n"
L"    Scope(class, association, indication, reference);\n"
L"\n"
L"Qualifier Static : boolean = false, \n"
L"    Scope(property, method), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Terminal : boolean = false, \n"
L"    Scope(class, association, indication);\n"
L"\n"
L"Qualifier UMLPackagePath : string = null, \n"
L"    Scope(class, association, indication);\n"
L"\n"
L"Qualifier Units : string = null, \n"
L"    Scope(property, method, parameter), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier ValueMap : string[], \n"
L"    Scope(property, method, parameter);\n"
L"\n"
L"Qualifier Values : string[], \n"
L"    Scope(property, method, parameter), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier Version : string = null, \n"
L"    Scope(class, association, indication), \n"
L"    Flavor(EnableOverride, Restricted, Translatable);\n"
L"\n"
L"Qualifier Weak : boolean = false, \n"
L"    Scope(reference), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier Write : boolean = false, \n"
L"    Scope(property);\n";

//
// CIM-2.26.0: qualifiers_optional.mof
//
const wchar_t cOptqualifiers[]=
L"// Copyright (c) 2007 DMTF.  All rights reserved.\n"
L"// <change cr=\"ArchCR00071.005\" type=\"add\">Add new \n"
L"//DisplayDescription qualifier.</change>\n"
L"// ==================================================================\n"
L"// Optional Qualifiers\n"
L"// Defined in the CIM Infrastructure Specification Section 2.5.3 \n"
L"// ==================================================================\n"
L"\n"
L"Qualifier Alias : string = null, \n"
L"    Scope(property, reference, method), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier Delete : boolean = false, \n"
L"    Scope(association, reference);\n"
L"\n"
L"Qualifier DisplayDescription : string = null, \n"
L"    Scope(any), \n"
L"    Flavor(EnableOverride, ToSubclass, Translatable);\n"
L"\n"
L"Qualifier Expensive : boolean = false, \n"
L"    Scope(any);\n"
L"\n"
L"Qualifier Ifdeleted : boolean = false, \n"
L"    Scope(association, reference);\n"
L"\n"
L"Qualifier Invisible : boolean = false, \n"
L"    Scope(class, association, property, reference, method);\n"
L"\n"
L"Qualifier Large : boolean = false, \n"
L"    Scope(class, property);\n"
L"\n"
L"Qualifier PropertyUsage : string = \"CurrentContext\", \n"
L"    Scope(property);\n"
L"\n"
L"Qualifier Provider : string = null, \n"
L"    Scope(any);\n"
L"\n"
L"Qualifier SyntaxType : string = null, \n"
L"    Scope(property, reference, method, parameter);\n"
L"\n"
L"Qualifier Syntax : string = null, \n"
L"    Scope(property, reference, method, parameter);\n"
L"\n"
L"Qualifier TriggerType : string = null, \n"
L"    Scope(class, association, indication, property, reference, method);\n"
L"\n"
L"Qualifier UnknownValues : string[], \n"
L"    Scope(property), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier UnsupportedValues : string[], \n"
L"    Scope(property), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n";

//
// MSFT_Qualifiers.mof
//
const wchar_t cMsftqualifiers[]=
L"//============================================================================\n"
L"// Copyright (C) Microsoft Corporation, All rights reserved. \n"
L"//============================================================================\n"
L"//\n"
L"\n"
L"Qualifier Stream : boolean = false, \n"
L"    Scope( method, parameter), \n"
L"    Flavor(DisableOverride, ToSubclass);\n"
L"\n"
L"Qualifier ClassVersion : string = null, \n"
L"    Scope(class, association, indication), \n"
L"    Flavor(EnableOverride, Restricted);\n";

//
// wmiqualifiers.mof
//
#endif

/*=============================================================================
**
** Declare global qualifer declarations
**
=============================================================================*/
extern MI_QualifierDecl gQualifiers[];

#endif /* _mof_qualifiers_h */

