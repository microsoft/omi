%Variables
SHORT_NAME: 'omi'
LONG_NAME: 'Open Management Infrastructure'
SHELL_HEADER: '#!/bin/sh'
SHORT_NAME_PREFIX: 'MSFT'
VENDOR: 'Microsoft Corporation'
GROUP: 'System Environment/Daemons'
LICENSE: 'MIT'
MAINTAINER: 'Microsoft Corporation'
PROVIDES: 'omipackage'
DESCRIPTION: 'omi server'
COPYRIGHT_FILE: 'Copyright (c) Microsoft Corporation'
HPUX_COPYRIGHT: 'Copyright (c) Microsoft Corporation'
ROOT_GROUP_NAME: 'root'
SHLIB_EXT: 'so'
PAM_COMMENT: '# The configuration of omi is generated by the omi installer.'
PAM_COMMENT_CLOSING: '# End of section generated by the omi installer.'
PAM_CONF_FILE: '/etc/pam.conf'
PAM_CONF_DIR: '/etc/pam.d'

%Files
/opt/omi/LICENSE;                             ../../LICENSE;                         644; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/omiagent;                        bin/omiagent;                          755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/omiserver;                       bin/omiserver;                         755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/omiengine;                       bin/omiengine;                         755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/omicli;                          bin/omicli;                            755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/omireg;                          bin/omireg;                            755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/omigen;                          bin/omigen;                            755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/omiconfigeditor;                 bin/omiconfigeditor;                   755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/lib/libmi.${{SHLIB_EXT}};            lib/libmi.${{SHLIB_EXT}};              755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/lib/libmicxx.${{SHLIB_EXT}};         lib/libmicxx.${{SHLIB_EXT}};           755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/lib/libomiclient.${{SHLIB_EXT}};     lib/libomiclient.${{SHLIB_EXT}};       755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/lib/libomiidentify.${{SHLIB_EXT}};   lib/libomiidentify.${{SHLIB_EXT}};     755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/omi/conf/omicli.conf;                ../etc/omicli.conf;                    444; root; sys
/etc/opt/omi/conf/omiserver.conf;             ../installbuilder/conf/omiserver.conf; 444; root; sys; conffile
/etc/opt/omi/conf/omigen.conf;                ../etc/omigen.conf;                    444; root; sys
/etc/opt/omi/conf/omireg.conf;                ../etc/omireg.conf;                    444; root; sys
/etc/opt/omi/conf/omiregister/root-omi/omiidentify.reg; ../etc/omiregister/root-omi/omiidentify.reg; 755; root; ${{ROOT_GROUP_NAME}}

%Directories
/opt;                                    755; root; ${{ROOT_GROUP_NAME}}; sysdir
/opt/omi;                                755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin;                            755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support;                    755; root; ${{ROOT_GROUP_NAME}}
/etc/opt;                                755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt/omi;                            755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/omi/conf;                       755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/omi/conf/omiregister/root-omi;  755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/omi/ssl;                        755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/omi/creds;                      755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/omi/conf/sockets;               700; omi;  omi
/var/opt;                                755; root; ${{ROOT_GROUP_NAME}}; sysdir
/var/opt/omi;                            755; root; ${{ROOT_GROUP_NAME}}
/var/opt/omi/log;                        755; root; ${{ROOT_GROUP_NAME}}
/var/opt/omi/lib;                        755; root; ${{ROOT_GROUP_NAME}}
/var/opt/omi/run;                        755; root; ${{ROOT_GROUP_NAME}}
/var/opt/omi/tmp;                        755; root; ${{ROOT_GROUP_NAME}}
/var/opt/omi/omiauth;                    755; root; ${{ROOT_GROUP_NAME}}
/etc/init.d;                             755; root; sys; sysdir

%% Somebody has to "own" these, and everything depends on OMI ...
/etc/opt/microsoft;                      755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft;                          755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft;                      755; root; ${{ROOT_GROUP_NAME}}

%Links

%Dependencies

%PAM_Functions
GetNewPAMConfig_file() {
    #
    # See if we have special marker file to use for PAM
    # For ease in customer debugging, return bad config if file is bad
    #
    if [ -f /etc/opt/omi/conf/pam.conf ]; then
        # PAM configuration file found; use that
        omi_conf=`cat /etc/opt/omi/conf/pam.conf`
        if [ $? -ne 0 ]; then
            # We had some sort of problem reading file
            # STDERR should have output; just return failure
            return 1
        fi

        echo "Used custom PAM configuration from /etc/opt/omi/conf/pam.conf"
        return 0
    fi

    #
    # Get configuration for sshd, service modules types auth and account
    #
    sshd_conf=`egrep "^[# ]*sshd[ 	]+(auth|account)" ${{PAM_CONF_FILE}}`
    if [ $? -ne 0 ]; then
        # No match found
        # sshd not explicitly configured.
        # Check to see if "other" is configured
        other_conf=`egrep "^[# ]*other[ 	]+(auth|account)" ${{PAM_CONF_FILE}}`
        if [ $? -eq 0 ]; then
            # "other" was found - use that (do not write any sort of new PAM configuraton)
            return 0
        fi
        # Use passwd

#ifndef ULINUX
        sshd_conf=`printf "${{pam_file_passwd}}"`
#else
        if [ -e "/etc/debian_version" ]; then
            sshd_conf=`printf "${{pam_file_passwd_ubuntu}}"`
        elif [ ! -e "/etc/sysconfig/networking" ] && [ ! -e"/etc/sysconfig/network-scripts"]; then
            sshd_conf=`printf "${{pam_file_passwd_suse}}"`
        else
            sshd_conf=`printf "${{pam_file_passwd_redhat}}"`
        fi
#endif
    fi

    #
    # Substitute sshd with omi.
    #
    omi_conf=`echo "$sshd_conf" | sed "s/sshd/omi/g"`
    if [ $? -ne 0 ]; then
        echo "can't parse ${{PAM_CONF_FILE}}"
        return 1
    fi
}

GetNewPAMConfig_dir() {
    #
    # See if we have special marker file to use for PAM
    # For ease in customer debugging, return bad config if file is bad
    #
    if [ -f /etc/opt/omi/conf/pam.conf ]; then
        # PAM configuration file found; use that
        omi_conf=`cat /etc/opt/omi/conf/pam.conf`
        if [ $? -ne 0 ]; then
            # We had some sort of problem reading file
            # STDERR should have output; just return failure
            return 1
        fi

        echo "Used custom PAM configuration from /etc/opt/omi/conf/pam.conf"
        return 0
    fi

    #
    # Get configuration for sshd, service modules types auth and account
    #
    sshd_conf=`egrep "(auth|account)" ${{PAM_CONF_DIR}}/sshd 2> /dev/null`
    if [ $? -ne 0 ]; then
        # No match found
        # sshd not explicitly configured.
        # Use passwd

#ifndef ULINUX
        sshd_conf=`printf "${{pam_dir_passwd}}"`
#else
        if [ -e "/etc/debian_version" ]; then
            sshd_conf=`printf "${{pam_dir_passwd_ubuntu}}"`
        elif [ ! -e "/etc/sysconfig/networking" ] && [ ! -e"/etc/sysconfig/network-scripts"]; then
            sshd_conf=`printf "${{pam_dir_passwd_suse}}"`
        else
            sshd_conf=`printf "${{pam_dir_passwd_redhat}}"`
        fi
#endif
    fi

    omi_conf=$sshd_conf
}

#
#
# ConfigurePAM
#
#
ConfigurePAM_file() {
    #
    # First check if omi is already configured in pam.conf
    #
    grep -s "^[# ]*omi" ${{PAM_CONF_FILE}} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        # Match found
        # Looks like omi is already configured
        echo "omi already configured"
        return 0
    fi

    GetNewPAMConfig_file

    #
    # Only update pam.conf if we are returning some new configuration
    if [ "$omi_conf" ]; then
        # Write the final configuration to pam.conf
        #
        # copy file first and modify this copy, so in case of low disk space we preserve the original file
        cp ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.omi-copy && printf "${{PAM_COMMENT}}\n$omi_conf\n${{PAM_COMMENT_CLOSING}}\n" >> ${{PAM_CONF_FILE}}.omi-copy
        if [ $? -ne 0 ]; then
            echo "can't update file ${{PAM_CONF_FILE}}.omi-copy"
            rm -f ${{PAM_CONF_FILE}}.omi-copy
            return 1
        fi
        # verify that complete file was written
        grep "${{PAM_COMMENT_CLOSING}}" ${{PAM_CONF_FILE}}.omi-copy > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "can't update file ${{PAM_CONF_FILE}}.omi-copy"
            rm -f ${{PAM_CONF_FILE}}.omi-copy
            return 1
        fi
        # use move to substitute original file with verified copy
        mv ${{PAM_CONF_FILE}}.omi-copy ${{PAM_CONF_FILE}}
        if [ $? -ne 0 ]; then
            echo "can't replace ${{PAM_CONF_FILE}}"
            return 1
        fi
    fi
}

ConfigurePAM_dir() {
    #
    # First check if omi is already configured
    #
    if [ -f ${{PAM_CONF_DIR}}/omi ]; then
        # Match found
        # Looks like omi is already configured
        echo "omi already configured"
        return 0
    fi

    GetNewPAMConfig_dir

    echo "#%%PAM-1.0
${{PAM_COMMENT}}
$omi_conf" > ${{PAM_CONF_DIR}}/omi
    if [ $? -ne 0 ]; then
        echo "can't create ${{PAM_CONF_DIR}}/omi"
        return 1
    fi
}


ConfigurePAM() {
    #
    # Check if pam is configured with single
    # configuration file or with configuration
    # directory.
    #
    if [ -s ${{PAM_CONF_FILE}} ]; then
        ConfigurePAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        ConfigurePAM_dir
    else
        # No pam configuration.
        echo "PAM does not seem to be configured."
        echo "Checked both ${{PAM_CONF_FILE}} and ${{PAM_CONF_DIR}}."
        return 1
    fi
    return 0
}

GetCurrentPAMConfig_file() {
    omi_current_conf=`grep "^[#\t]*omi" ${{PAM_CONF_FILE}}`
}

GetCurrentPAMConfig_dir() {
    omi_current_conf=`cat ${{PAM_CONF_DIR}}/omi | grep -v "#%%PAM-1.0" | grep -v "${{PAM_COMMENT}}"`
}

#
#
# UnconfigurePAM
#
#
UnconfigurePAM_file() {
    # Configured with single file

#if PF == SUNOS
    GetNewPAMConfig_file
    GetCurrentPAMConfig_file
    if [ "$omi_conf" != "$omi_current_conf" ]; then
        # It looks like the configuration has been changed since
        # installation or at least would change if we did a reinstall
        # Safest to leave the configuration as is.
        return 0
    fi
#endif

    #
    # Get all lines except omi configuration
    #
    pam_configuration=`grep -v "^[#	]*omi" ${{PAM_CONF_FILE}} | grep -v "${{PAM_COMMENT}}" | grep -v "${{PAM_COMMENT_CLOSING}}"`
    if [ $? -ne 0 ]; then
        # omi not configured in PAM
        return 0
    fi

    #
    # Write it back (to the copy first)
    #
    cp -p ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.tmp
    echo "$pam_configuration" > ${{PAM_CONF_FILE}}.tmp
    if [ $? -ne 0 ]; then
        echo "can't write to ${{PAM_CONF_FILE}}.tmp"
        return 1
    fi
    mv ${{PAM_CONF_FILE}}.tmp ${{PAM_CONF_FILE}}
    if [ $? -ne 0 ]; then
        echo "can't replace ${{PAM_CONF_FILE}}"
        return 1
    fi

}

UnconfigurePAM_dir() {
    # Configured with directory
    if [ -f ${{PAM_CONF_DIR}}/omi ]; then

#if PF == SUNOS
        GetNewPAMConfig_dir
        GetCurrentPAMConfig_dir
        if [ "$omi_conf" != "$omi_current_conf" ]; then
            # It looks like the configuration has been changed since
            # installation or at least would change if we did a reinstall
            # Safest to leave the configuration as is.
            return 0
        fi
#endif
        rm -f ${{PAM_CONF_DIR}}/omi
        return 0
    fi

}

UnconfigurePAM() {
    #
    # Check if pam is configured with single
    # configuration file or with configuration
    # directory.
    #
    if [ -s ${{PAM_CONF_FILE}} ]; then
        UnconfigurePAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        UnconfigurePAM_dir
    fi
}

%Preinstall_0
${{SHELL_HEADER}}
%Postinstall_0
${{SHELL_HEADER}}
%Preuninstall_0
${{SHELL_HEADER}}
%Postuninstall_0
${{SHELL_HEADER}}

%Postinstall_10
certdir=/etc/opt/omi/ssl/
cnffile=/etc/opt/omi/ssl/ssl.cnf
keyfile=/etc/opt/omi/ssl/omikey.pem
certfile=/etc/opt/omi/ssl/omi.pem
omicertmarkerfile=/etc/opt/omi/ssl/.omi_cert_marker
OPENSSL_PATH="openssl"
ALGORITHM_KEY_IN_CERTIFICATE="Signature Algorithm"
SHA1="sha1"
#if PF == SunOS
#if PFMINOR == 9
    LD_LIBRARY_PATH=/usr/local/ssl/lib
    export LD_LIBRARY_PATH
    OPENSSL_PATH="/usr/local/bin/openssl"
#elseif PFMINOR == 10
    LD_LIBRARY_PATH=/usr/lib
    export LD_LIBRARY_PATH
    OPENSSL_PATH="/usr/bin/openssl"
#endif
#endif

is_suse11_platform_with_openssl1(){
  if [ -f /etc/SuSE-release ];then
     VERSION=`cat /etc/SuSE-release|grep "VERSION = 11"|awk 'FS=":"{print $3}'`
     if [ ! -z "$VERSION" ];then
        which openssl1>/dev/null 2>&1
        if [ $? -eq 0 -a $VERSION -eq 11 ];then
           return 0
        fi
     fi
  fi
  return 1
}

is_suse11_platform_with_openssl1
if [ $? -eq 0 ];then
   OPENSSL_PATH="openssl1"
fi

WriteSSLconfig() {
    # Generate ssl.cnf
    cat > $cnffile <<EOF
[ req ]
distinguished_name     = req_distinguished_name
prompt                 = no
[ req_distinguished_name ]
CN                     = $1
CN                     = $2
EOF
}

GenerateKeyCert() {
    $OPENSSL_PATH req -x509 -sha256 -newkey rsa:3072 -days 3650 -nodes -config $cnffile -keyout $keyfile -out $certfile
}

HandleConfigFiles() {
    grep -i "sslciphersuite" /etc/opt/omi/conf/omiserver.conf 1> /dev/null 2> /dev/null
    # if there is no sslCipherSuite defined in omiserver.conf, check the previous omiserver/cimserver OM conf files for an sslCipherSuite defined
    if [ $? -ne 0 ]; then
        if [ -f /etc/opt/omi/conf/omiserver.conf.rpmsave ]; then
            echo `grep sslciphersuite /etc/opt/omi/conf/omiserver.conf.rpmsave` >> /etc/opt/omi/conf/omiserver.conf
        elif [ -f /etc/opt/omi/conf/omiserver.conf.pkgsave ]; then
            echo `grep sslciphersuite /etc/opt/omi/conf/omiserver.conf.pkgsave` >> /etc/opt/omi/conf/omiserver.conf
        elif [ -f /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave ]; then
            echo `grep sslciphersuite /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave` >> /etc/opt/omi/conf/omiserver.conf
        elif [ -f /etc/opt/microsoft/scx/conf/omiserver.conf ]; then
            echo `grep sslciphersuite /etc/opt/microsoft/scx/conf/omiserver.conf` >> /etc/opt/omi/conf/omiserver.conf
        elif [ -f /etc/opt/microsoft/scx/conf/cimserver_current.conf ]; then
            echo `grep sslCipherSuite /etc/opt/microsoft/scx/conf/cimserver_current.conf` | sed "s@sslCipherSuite@sslciphersuite@" >> /etc/opt/omi/conf/omiserver.conf
        fi
    fi

    grep -q '^httpsport=0$' /etc/opt/omi/conf/omiserver.conf 1> /dev/null 2> /dev/null
    # If there is no httpsport defined in omiserver.conf, check the previous files
    if [ $? -eq 0 ]; then
        HTTPSPORT=""
        if [ -f /etc/opt/omi/conf/omiserver.conf.rpmsave ]; then
            HTTPSPORT=`grep '^httpsport=' /etc/opt/omi/conf/omiserver.conf.rpmsave | cut -d= -f2`
        elif [ -f /etc/opt/omi/conf/omiserver.conf.pkgsave ]; then
            HTTPSPORT=`grep '^httpsport=' /etc/opt/omi/conf/omiserver.conf.pkgsave | cut -d= -f2`
        elif [ -f /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave ]; then
            HTTPSPORT=`grep '^httpsport=' /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave | cut -d= -f2`
        elif [ -f /etc/opt/microsoft/scx/conf/omiserver.conf ]; then
            HTTPSPORT=`grep '^httpsport=' /etc/opt/microsoft/scx/conf/omiserver.conf | cut -d= -f2`
        elif [ -f /etc/opt/microsoft/scx/conf/cimserver_current.conf ]; then
            HTTPSPORT=`grep '^httpsport=' /etc/opt/microsoft/scx/conf/cimserver_current.conf | cut -d= -f2`
        fi

        # If we found an HTTSPORT from previous configuration, then restore it now
        if [ -n "$HTTPSPORT" ]; then
	    # omiconfigeditor requires SSL linkage to be set up properly on Linux
	    # If the file to set these up exists, run it
	    if [ -f /opt/omi/bin/support/installssllinks ]; then
	       /opt/omi/bin/support/installssllinks
	    fi

            echo "Restoring OMI HTTPSPORT to $HTTPSPORT ..."
            /opt/omi/bin/omiconfigeditor httpsport -s $HTTPSPORT < /etc/opt/omi/conf/omiserver.conf > /etc/opt/omi/conf/omiserver.conf_temp
            mv /etc/opt/omi/conf/omiserver.conf_temp /etc/opt/omi/conf/omiserver.conf
        fi
    fi
}

DeleteUnsupportedCertificate() {
    # This function will delete the unsupported sha1 certificate 
    if [ -f "$keyfile" -a -f "$certfile" ]; then
        result=`$OPENSSL_PATH x509 -in $certfile -text | grep -i "$ALGORITHM_KEY_IN_CERTIFICATE" | grep -i "$SHA1"`
        
        if [ -n "$result" ]; then
            echo "************************************************************"
            echo "* Deleting unsupported SHA1 certificate *"
            echo "************************************************************"
            rm -rf $certdir*
        fi

	if [ `$OPENSSL_PATH x509 -in $certfile -text | grep "Public-Key"| sed 's/[^0-9]*//g'` -lt 3072 ]; then
	    echo "************************************************************"
	    echo "* Deleting certificates whose public key is less than 3072 *"
	    echo "************************************************************"
	    rm -rf $certdir*
	fi
    fi
}

# Handle upgrade from older SCX configurations. This needs to be in OMI since
# certain installers (Debian) will delete unused configuration files before
# %Pre / %Post see the light of day. For OMI config, do it before SCX install.

HandleConfigFiles

DeleteUnsupportedCertificate

if [ -f "$keyfile" -a -f "$certfile" ]; then
    echo
    echo "************************************************************"
    echo "* Warning: The certificate and keyfile were not generated  *"
    echo "* since they already exist.                                *"
    echo "************************************************************"
else
    hostname=`hostname`
    longhostname=""

    # Try to get the FQDN with fallbacks:
#if PF == Linux
    ##
    ## First try hostname -f (this will fail on some Linux systems)
    ##
    hn=`hostname -f 2> /dev/null`
    if [ "$?" = "0" ]; then
        longhostname=$hn
    fi
#endif

    ##
    ## Attempt to obtain the domain name from /etc/resolve.conf
    ##
    if [ -z "$longhostname" -a -f "/etc/resolv.conf" ]; then
        domain=`cat /etc/resolv.conf | grep '^domain' | awk '{print $2}'`

        if [ -n "$domain" ]; then
            longhostname="$hostname.$domain"
        fi
    fi

    ##
    ## Attempt to obtain long hostname with 'nslookup' command
    ##
    if [ -z "$longhostname" -a -n "`which nslookup`" ]; then
    	lhs=`nslookup $hostname | grep '^Name:' | awk '{print $2}' | grep $hostname`
    	if [ -n "$lhs" ]; then
    	    longhostname=$lhs
    	fi
    fi

    if [ -z "$longhostname" ]; then
        longhostname="$hostname"
    fi

    WriteSSLconfig "$hostname" "$longhostname"

    # When the FQDN is not RFC compliant, openssl fails to generate a cerificate.
    # We will try a fallback for the FQDN.
    GenerateKeyCert
    if [ $? -ne 0 ]; then
        echo "Error generating ssl keys. Now trying fallback FQDN : localhost.local" 1>&2
        WriteSSLconfig localhost localhost.local
        GenerateKeyCert
    fi

    if [ -f "$keyfile" -a -f "$certfile" ]; then
        chmod 600 $keyfile
        chmod 644 $certfile
    else
        echo "Unexpected error : $keyfile or $certfile were not generated by $OPENSSL_PATH" 1>&2
        echo "Fully qualified domain name likely not RFC compliant" 1>&2
        exit 1
    fi

    # Generate a marker that exists to prove that the cert in this directory
    # was generated by omi (as opposed to OM's cert which will overwrite OMI's
    # cert when OM is installed)
    touch $omicertmarkerfile
fi

%Postinstall_20
#include PAM_Functions
ConfigurePAM
chown omi:omi /var/opt/omi/log
chown omi:omi /var/opt/omi/run
chown omi:omi /etc/opt/omi/ssl/omikey.pem
chown omi:omi /etc/opt/omi/creds
chmod 500 /etc/opt/omi/creds
chown omi:omi /etc/opt/omi/creds/omi.keytab >/dev/null 2>&1
chown omi:omi /etc/opt/omi/.creds >/dev/null 2>&1
chown omi:omi /etc/opt/omi/.creds/ntlm >/dev/null 2>&1
chown omi:omi /etc/opt/omi/conf/sockets
chmod 700 /etc/opt/omi/conf/sockets
rm -f /var/opt/omi/log/omiserver-send.trc >/dev/null 2>&1
rm -f /var/opt/omi/log/omiserver-recv.trc >/dev/null 2>&1
rm -f /var/opt/omi/log/omiclient-send.trc >/dev/null 2>&1
rm -f /var/opt/omi/log/omiclient-recv.trc >/dev/null 2>&1

# Fix potential permissons issue on /etc/opt/omi directory
chown root:${{ROOT_GROUP_NAME}} /etc/opt/omi

%Preuninstall_100
#include PAM_Functions
UnconfigurePAM
