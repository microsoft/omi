%Variables
pam_dir_passwd_redhat: 'auth include system-auth\n account required pam_nologin.so\n account include system-auth'
pam_dir_passwd_suse:   'auth include common-auth\n auth required pam_nologin.so\n account include common-account'
pam_dir_passwd_ubuntu: 'auth required pam_env.so\n auth required pam_unix.so nullok_secure\n account required pam_unix.so\n session required pam_limits.so'

pam_file_passwd_redhat: 'omi auth include system-auth\nomi account required pam_nologin.so\nomi account include system-auth'
pam_file_passwd_suse:   'omi auth include common-auth\nomi auth required pam_nologin.so\nomi account include common-account'
pam_file_passwd_ubuntu: 'omi auth required pam_env.so\nomi auth required pam_unix.so nullok_secure\nomi account required pam_unix.so\nomi session required pam_limits.so'

PF:           'Linux'
SERVICE_CTL:  '/opt/omi/bin/service_control'

%Files
/opt/omi/bin/support/installssllinks;         ../scripts/installssllinks;                              755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/omid.systemd;            ../installbuilder/service_scripts/omid.systemd;          644; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/omid.initd;              ../installbuilder/service_scripts/omid.ulinux;           755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/omid.upstart;            ../installbuilder/service_scripts/omid.upstart;          755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/service_control;                 ../installbuilder/service_scripts/service_control.linux; 755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/ktstrip;                 ../tools/ktstrip;                                        755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/config_keytab_update.sh; ../scripts/config_keytab_update.sh;                      755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/allocdump;               ../tools/allocdump;                                      755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/gdb_allocdump;           ../tools/gdb_allocdump;                                  644; root; ${{ROOT_GROUP_NAME}}

%Directories
/opt/omi/lib;                            775; root; omiusers
/etc/opt/omi/conf/omiregister;           775; root; omiusers
/var/opt/omi/omiusers;                   775; root; omiusers

%Defines
ULINUX

%OmiService_funcs
# Various distributions have different paths for systemd unit files ...

SYSTEMD_UNIT_DIR=""
ResolveSystemdPaths()
{
    local UNIT_DIR_LIST="/usr/lib/systemd/system /lib/systemd/system"

    if pidof systemd 1> /dev/null 2> /dev/null; then
        # Be sure systemctl lives where we expect it to
        if [ ! -f /bin/systemctl ]; then
            echo "FATAL: Unable to locate systemctl program" 1>&2
            exit 1
        fi

        # Find systemd unit directory
        for i in ${UNIT_DIR_LIST}; do
            if [ -d $i ]; then
                SYSTEMD_UNIT_DIR=${i}
                return 0
            fi
        done

        # Didn't fine unit directory, that's fatal
        echo "FATAL: Unable to resolve systemd unit directory!" 1>&2
        exit 1
    else
	return 1
    fi
}

RemoveGenericService() {
    SERVICE=$1
    if [ -z "$SERVICE" ]; then
        echo "FATAL: RemoveGenericService requires parameter (service name)" 1>&2
        exit 1
    fi

    # Stop the service in case it's running

    ResolveSystemdPaths
    # Does systemd live on this system
    if pidof systemd 1> /dev/null 2> /dev/null; then
        # Do we have a systemd unit file?
        if [ -f ${SYSTEMD_UNIT_DIR}/${SERVICE}.service ]; then
            /bin/systemctl stop ${SERVICE}
        fi
    fi

    if  [ -f /etc/init/${SERVICE}.conf ]; then
        initctl stop omid
    fi

    if [ -f /etc/init.d/${SERVICE} ]; then
        if [ -x /sbin/service ]; then
            /sbin/service ${SERVICE} stop
        elif [ -x /usr/sbin/service ]; then
            /usr/sbin/service ${SERVICE} stop
        elif [ -x /usr/sbin/invoke-rc.d ]; then
            /usr/sbin/invoke-rc.d ${SERVICE} stop
        else
            echo "Unrecognized service controller to stop ${SERVICE} service" 1>&2
            exit 1
        fi
    fi

    # Registered as a systemd service?
    #
    # Note: We've never deployed systemd unit files automatically in the %Files
    # section. Thus, for systemd services, it's safe to remove the file.

    if [ -f ${SYSTEMD_UNIT_DIR}/${SERVICE}.service ]; then
        echo "Unconfiguring ${SERVICE} (systemd) service ..."
        /bin/systemctl disable ${SERVICE}
        rm -f ${SYSTEMD_UNIT_DIR}/${SERVICE}.service
        /bin/systemctl daemon-reload
    fi

    if [ -f /etc/init/omid.conf ]; then
        echo "Unconfiguring omid (upstart) service ..."
        rm -f /usr/init/omid.conf
        initctl reload-configuration
    fi

    if [ -f /etc/init.d/${SERVICE} ]; then
        echo "Unconfiguring ${SERVICE} service ..."
        if [ -f /usr/sbin/update-rc.d ]; then
            /usr/sbin/update-rc.d -f ${SERVICE} remove
        elif [ -x /usr/lib/lsb/remove_initd ]; then
            /usr/lib/lsb/remove_initd /etc/init.d/${SERVICE}
        elif [ -x /sbin/chkconfig ]; then
            chkconfig --del ${SERVICE} > /dev/null
        else
            echo "Unrecognized Service Controller to unregister ${SERVICE} Service."
            exit 1
        fi
    fi
}

StopOmiService() {
    ${{SERVICE_CTL}} stop
}

RemoveOmiService() {
    RemoveGenericService omid
    [ -f /etc/init.d/omid ] && rm /etc/init.d/omid
    [ -f /etc/init/omid.conf ] && rm /etc/init/omid.conf
}

ConfigureOmiService() {
    echo "Configuring OMI service ..."
    pidof systemd 1> /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
        # systemd
        ResolveSystemdPaths
        cp /opt/omi/bin/support/omid.systemd ${SYSTEMD_UNIT_DIR}/omid.service
        /bin/systemctl daemon-reload
        /bin/systemctl enable omid
    elif [ -x /sbin/initctl -a -f /etc/init/networking.conf ]; then
        # If we have /sbin/initctl, we have upstart.
        # Note that the upstart script requires networking,
        # so only use upstart if networking is controlled by upstart (not the case in RedHat 6)
        cp /opt/omi/bin/support/omid.upstart /etc/init/omid.conf

        # initctl registers it with upstart
        initctl reload-configuration
    else
        cp /opt/omi/bin/support/omid.initd /etc/init.d/omid

        if [ -x /usr/sbin/update-rc.d ]; then
            update-rc.d omid defaults > /dev/null
        elif [ -x /usr/lib/lsb/install_initd ]; then
            /usr/lib/lsb/install_initd /etc/init.d/omid
        elif [ -x /sbin/chkconfig ]; then
            chkconfig --add omid > /dev/null
        else
            echo "Unrecognized Service Controller to configure OMI Service."
            exit 1
        fi
    fi

    ${{SERVICE_CTL}} start
}

%Preinstall_10
#include OmiService_funcs

RemoveGenericService omiserverd
RemoveGenericService scx-cimd
RemoveOmiService

egrep -q "^omiusers:" /etc/group
if [ $? -ne 0 ]; then
    echo "Creating omiusers group ..."
    groupadd -r omiusers
fi
egrep -q "^omi:" /etc/group
if [ $? -ne 0 ]; then
    echo "Creating omi group ..."
    groupadd -r omi
fi

%Postinstall_950
#include OmiService_funcs

# Fix permissions for new directories
chgrp omiusers /opt/omi/lib /etc/opt/omi/conf/omiregister /var/opt/omi/omiusers
chmod 775 /opt/omi/lib /etc/opt/omi/conf/omiregister /var/opt/omi/omiusers

chmod 500 /opt/omi/bin/support/ktstrip
chmod 500 /opt/omi/bin/support/config_keytab_update.sh


# Be certain that SSL linkages exist for OMI utilities
/opt/omi/bin/support/installssllinks

# Set up the cron job to update the omi.keytab
/opt/omi/bin/support/config_keytab_update.sh --unconfigure
/opt/omi/bin/support/config_keytab_update.sh --configure

ConfigureOmiService

%Preuninstall_10
#include OmiService_funcs

# If we're called for upgrade, don't do anything
if ${{PERFORMING_UPGRADE_NOT}}; then
    RemoveOmiService
    /opt/omi/bin/support/config_keytab_update.sh --unconfigure
fi

%Postuninstall_100
if ${{PERFORMING_UPGRADE_NOT}}; then
    rm -f /opt/omi/lib/libcrypto* /opt/omi/lib/libssl* /opt/omi/lib/.libcrypto* /opt/omi/lib/.libssl*
    rmdir /opt/omi/lib > /dev/null 2>&1
    rmdir /opt/omi > /dev/null 2>&1

    egrep -q "^omiusers:" /etc/group
    if [ $? -eq 0 ]; then
        echo "Deleting omiusers group ..."
        groupdel omiusers
    fi
    egrep -q "^omi:" /etc/passwd
    if [ $? -eq 0 ]; then
       echo "Deleting omi service account ..."
           userdel omi
    fi
    egrep -q "^omi:" /etc/group
    if [ $? -eq 0 ]; then
        echo "Deleting omi group ..."
        groupdel omi
    fi
fi

