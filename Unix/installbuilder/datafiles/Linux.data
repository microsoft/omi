%Variables
PF:           'Linux'
SERVICE_CTL:  '/opt/omi/bin/service_control'

%Files
/opt/omi/bin/support/installssllinks;         ../scripts/installssllinks;            755; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/support/omid.systemd;            ../installbuilder/service_scripts/omid.systemd; 644; root; ${{ROOT_GROUP_NAME}}
/opt/omi/bin/service_control;                 ../installbuilder/service_scripts/service_control.linux; 755; root; ${{ROOT_GROUP_NAME}}

%Directories
/opt/omi/bin/support;                    755; root; ${{ROOT_GROUP_NAME}}

%OmiService_funcs
# Various distributions have different paths for systemd unit files ...

SYSTEMD_UNIT_DIR=""
ResolveSystemdPaths()
{
    local UNIT_DIR_LIST="/usr/lib/systemd/system /lib/systemd/system"

    if pidof systemd 1> /dev/null 2> /dev/null; then
        # Be sure systemctl lives where we expect it to
        if [ ! -f /bin/systemctl ]; then
            echo "FATAL: Unable to locate systemctl program" 1>&2
            exit 1
        fi

        # Find systemd unit directory
        for i in ${UNIT_DIR_LIST}; do
            if [ -d $i ]; then
                SYSTEMD_UNIT_DIR=${i}
                return 0
            fi
        done

        # Didn't fine unit directory, that's fatal
        echo "FATAL: Unable to resolve systemd unit directory!" 1>&2
        exit 1
    else
	return 1
    fi
}

RemoveGenericService() {
    SERVICE=$1
    if [ -z "$SERVICE" ]; then
        echo "FATAL: RemoveGenericService requires parameter (service name)" 1>&2
        exit 1
    fi

    # Stop the service in case it's running

    ResolveSystemdPaths
    # Does systemd live on this system
    if pidof systemd 1> /dev/null 2> /dev/null; then
        # Do we have a systemd unit file?
        if [ -f ${SYSTEMD_UNIT_DIR}/${SERVICE}.service ]; then
            /bin/systemctl stop ${SERVICE}
        fi
    fi

    if [ -f /etc/init.d/${SERVICE} ]; then
        if [ -x /usr/sbin/invoke-rc.d ]; then
            /usr/sbin/invoke-rc.d ${SERVICE} stop
        elif [ -x /sbin/service ]; then
            /sbin/service ${SERVICE} stop
        elif [ -x /bin/systemctl ]; then
            /bin/systemctl stop ${SERVICE}
        else
            echo "Unrecognized service controller to stop ${SERVICE} service" 1>&2
            exit 1
        fi
    fi

    # Registered as a systemd service?
    #
    # Note: We've never deployed systemd unit files automatically in the %Files
    # section. Thus, for systemd services, it's safe to remove the file.

    if [ -f ${SYSTEMD_UNIT_DIR}/${SERVICE}.service ]; then
        echo "Unconfiguring ${SERVICE} (systemd) service ..."
        /bin/systemctl disable ${SERVICE}
        rm -f ${SYSTEMD_UNIT_DIR}/${SERVICE}.service
        /bin/systemctl daemon-reload
    fi

    if [ -f /etc/init.d/${SERVICE} ]; then
        echo "Unconfiguring ${SERVICE} service ..."
        if [ -f /usr/sbin/update-rc.d ]; then
            /usr/sbin/update-rc.d -f ${SERVICE} remove
        elif [ -x /usr/lib/lsb/remove_initd ]; then
            /usr/lib/lsb/remove_initd /etc/init.d/${SERVICE}
        elif [ -x /sbin/chkconfig ]; then
            chkconfig --del ${SERVICE} > /dev/null
        else
            echo "Unrecognized Service Controller to unregister ${SERVICE} Service."
            exit 1
        fi
    fi
}

StopOmiService() {
    ${{SERVICE_CTL}} stop
}

RemoveOmiService() {
    # Stop the server if it's running
    if [ -f ${{SERVICE_CTL}} ]; then
        StopOmiService
    elif [ -f /opt/omi/bin/omiserver ]; then
        /opt/omi/bin/omiserver -s > /dev/null 2> /dev/null
    fi

    RemoveGenericService omid
    [ -f /etc/init.d/omid ] && rm /etc/init.d/omid
}

ConfigureOmiService() {
    echo "Configuring OMI service ..."
    pidof systemd 1> /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
        # systemd
        ResolveSystemdPaths
        cp /opt/omi/bin/support/omid.systemd ${SYSTEMD_UNIT_DIR}/omid.service
        /bin/systemctl daemon-reload
        /bin/systemctl enable omid
    else
        cp /opt/omi/bin/support/omid /etc/init.d/omid

        if [ -x /usr/sbin/update-rc.d ]; then
            update-rc.d omid defaults > /dev/null
        elif [ -x /usr/lib/lsb/install_initd ]; then
            /usr/lib/lsb/install_initd /etc/init.d/omid
        elif [ -x /sbin/chkconfig ]; then
            chkconfig --add omid > /dev/null
        else
            echo "Unrecognized Service Controller to configure OMI Service."
            exit 1
        fi
    fi

    ${{SERVICE_CTL}} start
}

%Preinstall_10
#include OmiService_funcs

RemoveGenericService omiserverd
RemoveGenericService scx-cimd
RemoveOmiService

%Postinstall_950
#include OmiService_funcs

# Be certain that SSL linkages exist for OMI utilities
/opt/omi/bin/support/installssllinks

ConfigureOmiService

%Postuninstall_100
#include OmiService_funcs

if ${{PERFORMING_UPGRADE_NOT}}; then
    RemoveOmiService

    rm -f /opt/omi/lib/libcrypto* /opt/omi/lib/libssl*
    rmdir /opt/omi/lib > /dev/null 2>&1
    rmdir /opt/omi > /dev/null 2>&1
    rmdir /opt > /dev/null 2>&1
fi
