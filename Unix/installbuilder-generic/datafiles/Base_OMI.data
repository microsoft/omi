%Variables
SHORT_NAME: 'omiserver'
LONG_NAME: 'Open Management Infrastructure'
SHELL_HEADER: '#!/bin/bash'
VENDOR: 'OpenGroup'
GROUP: 'OpenGroup'
LICENSE: 'MSFT'
MAINTAINER: 'OpenGroup'
PROVIDES: 'omipackage'
DESCRIPTION: 'Generic OMI'
COPYRIGHT_FILE: 'Copyright'
PAM_COMMENT: '# The configuration of omi is generated by the omi installer.'
PAM_COMMENT_CLOSING: '# End of section generated by the omi installer.'
PAM_CONF_FILE: '/etc/pam.conf'
PAM_CONF_DIR: '/etc/pam.d'
pam_dir_passwd_redhat: 'auth include system-auth\n account required pam_nologin.so\n account include system-auth'
pam_dir_passwd_suse:   'auth include common-auth\n auth required pam_nologin.so\n account include common-account'
pam_dir_passwd_ubuntu: 'auth required pam_env.so\n auth required pam_unix.so nullok_secure\n account required pam_unix.so\n session required pam_limits.so'

pam_file_passwd_redhat: 'omi auth include system-auth\nomi account required pam_nologin.so\nomi account include system-auth'
pam_file_passwd_suse:   'omi auth include common-auth\nomi auth required pam_nologin.so\nomi account include common-account'
pam_file_passwd_ubuntu: 'omi auth required pam_env.so\nomi auth required pam_unix.so nullok_secure\nomi account required pam_unix.so\nomi session required pam_limits.so'

%Defines
ULINUX

%Files
/opt/omi/bin/omiagent;                                bin/omiagent;                                        755; root; root
/opt/omi/bin/omiserver;                               bin/omiserver;                                       755; root; root
/opt/omi/bin/omicli;                                  bin/omicli;                                          755; root; root
/opt/omi/bin/omicheck;                                bin/omicheck;                                        755; root; root
/opt/omi/bin/omireg;                                  bin/omireg;                                          755; root; root
/opt/omi/bin/omigen;                                  bin/omigen;                                          755; root; root
/opt/omi/etc/omicli.conf;                             ../etc/omicli.conf;                                  444; root; root; conffile
/opt/omi/etc/omiserver.conf;                          ../etc/omiserver.conf;                               444; root; root; conffile
/opt/omi/etc/omigen.conf;                             ../etc/omigen.conf;                                  444; root; root; conffile
/opt/omi/etc/omiregister/root-omi/omiidentify.reg;    ../etc/omiregister/root-omi/omiidentify.reg;         755; root; root
/opt/omi/etc/omiregister/root-check/omiidentify.reg;  ../etc/omiregister/root-omi/omiidentify.reg;         755; root; root
/opt/omi/lib/libmi.so;                                lib/libmi.so;                                        755; root; root
/opt/omi/lib/libmicxx.so;                             lib/libmicxx.so;                                     755; root; root
/opt/omi/lib/libomiclient.so;                         lib/libomiclient.so;                                 755; root; root
/opt/omi/lib/libomiidentify.so;                       lib/libomiidentify.so;                               755; root; root
/opt/omi/bin/support/installssllinks;                 ../installbuilder-generic/installssllinks;           755; root; root
/opt/omi/bin/omiserver.systemd;                       ../installbuilder-generic/scripts/omiserver.systemd; 755; root; root
/opt/omi/bin/omiserver.sysv;                          ../installbuilder-generic/scripts/omiserver.sysv;    755; root; root

%Directories
/opt;                                    755; root; root; sysdir
/opt/omi;                                755; root; root
/opt/omi/bin;                            755; root; root
/opt/omi/bin/support;                    755; root; root
/opt/omi/lib;                            755; root; root
/opt/omi/etc;                            755; root; root
/opt/omi/etc/omiregister;                755; root; root
/opt/omi/etc/omiregister/interop;        755; root; root
/opt/omi/etc/omiregister/root-check;     755; root; root
/opt/omi/etc/omiregister/root-cimv2;     755; root; root
/opt/omi/etc/omiregister/root-omi;       755; root; root
/opt/omi/etc/ssl;                        755; root; root
/opt/omi/etc/ssl/certs;                  755; root; root
/opt/omi/var;                            755; root; root
/opt/omi/var/log;                        755; root; root
/opt/omi/var/omiauth;                    755; root; root
/opt/omi/var/run;                        755; root; root
/opt/omi/share;                          755; root; root

%Links

%Dependencies

%Preinstall_0
${{SHELL_HEADER}}
%Postinstall_0
${{SHELL_HEADER}}
%Preuninstall_0
${{SHELL_HEADER}}
%Postuninstall_0
${{SHELL_HEADER}}

%Postinstall_50

# set up OpenSSL links
/opt/omi/bin/support/installssllinks

# Generate key and cert

cnffile=/opt/omi/etc/ssl/ssl.cnf
keyfile=/opt/omi/etc/ssl/certs/omikey.pem
certfile=/opt/omi/etc/ssl/certs/omi.pem

if [ -f "$keyfile" -a -f "$certfile" ]; then
    echo
    echo "************************************************************"
    echo "* Warning: The certificate and keyfile were not generated  *"
    echo "* since they already exist.                                *"
    echo "************************************************************"
else
    # Generate ssl.cnf
    hostname=`hostname`
    longhostname=

    ##
    ## First try hostname -f (this will fail on some Linux systems)
    ##
    hn=`hostname -f 2> /dev/null`
    if [ "$?" = "0" ]; then
        longhostname=$hn
    else
        longhostname=`hostname`
    fi

    ##
    ## Attempt to obtain domain name from /etc/resolve.conf
    ##
    if [ -f "/etc/resolv.conf" ]; then
        domain=`cat /etc/resolv.conf | grep '^domain' | awk '{print $2}'`
	
        if [ -n "$domain" ]; then
            longhostname=`hostname`.$domain
        fi
    fi
    
    ##
    ## Attempt to obtain long hostname with 'nslookup' command
    ##
    if [ -n "`which nslookup`" ]; then
	host=`hostname`
	lhs=`nslookup $host | grep '^Name:' | awk '{print $2}' | grep $host`
	if [ -n "$lhs" ]; then
	    longhostname=$lhs
	fi
    fi
    
    ##
    ## Just print host hostname:
    ##
    if [ "$longhostname" = "" ]; then
	longhostname=`hostname`
    fi
    cat > $cnffile <<EOF
[ req ]
distinguished_name     = req_distinguished_name
prompt                 = no
[ req_distinguished_name ]
CN                     = $hostname
CN                     = $longhostname
EOF

    openssl req -x509 -sha1 -newkey rsa:2048 -days 3650 -nodes -config $cnffile -keyout $keyfile -out $certfile
    chmod 600 $keyfile
    chmod 644 $certfile

fi




%PAM_Functions
GetNewPAMConfig_file() {
    #
    # See if we have special marker file to use for PAM
    # For ease in customer debugging, return bad config if file is bad
    #
    if [ -f /etc/opt/microsoft/omi/conf/pam.conf ]; then
        # PAM configuration file found; use that
        omi_conf=`cat /etc/opt/microsoft/omi/conf/pam.conf`
        if [ $? -ne 0 ]; then
            # We had some sort of problem reading file
            # STDERR should have output; just return failure
            return 1
        fi

        echo "Used custom PAM configuration from /etc/opt/microsoft/omi/conf/pam.conf"
        return 0
    fi

    #
    # Get configuration for sshd, service modules types auth and account
    #
    sshd_conf=`egrep "^[# ]*sshd[ 	]+(auth|account)" ${{PAM_CONF_FILE}}`
    if [ $? -ne 0 ]; then
        # No match found
        # sshd not explicitly configured.
        # Check to see if "other" is configured
        other_conf=`egrep "^[# ]*other[ 	]+(auth|account)" ${{PAM_CONF_FILE}}`
        if [ $? -eq 0 ]; then
            # "other" was found - use that (do not write any sort of new PAM configuraton)
            return 0
        fi
        # Use passwd

#ifndef ULINUX
        sshd_conf=`printf "${{pam_file_passwd}}"`
#else
        if [ -e "/etc/debian_version" ]; then
            sshd_conf=`printf "${{pam_file_passwd_ubuntu}}"`
        elif [ ! -e "/etc/sysconfig/networking" ] && [ ! -e"/etc/sysconfig/network-scripts"]; then
            sshd_conf=`printf "${{pam_file_passwd_suse}}"`
        else
            sshd_conf=`printf "${{pam_file_passwd_redhat}}"`
        fi
#endif
    fi

    #
    # Substitute sshd with omi.
    #
    omi_conf=`echo "$sshd_conf" | sed "s/sshd/omi/g"`
    if [ $? -ne 0 ]; then
        echo "can't parse ${{PAM_CONF_FILE}}"
        return 1
    fi
}

GetNewPAMConfig_dir() {
    #
    # See if we have special marker file to use for PAM
    # For ease in customer debugging, return bad config if file is bad
    #
    if [ -f /etc/opt/microsoft/omi/conf/pam.conf ]; then
        # PAM configuration file found; use that
        omi_conf=`cat /etc/opt/microsoft/omi/conf/pam.conf`
        if [ $? -ne 0 ]; then
            # We had some sort of problem reading file
            # STDERR should have output; just return failure
            return 1
        fi

        echo "Used custom PAM configuration from /etc/opt/microsoft/omi/conf/pam.conf"
        return 0
    fi

    #
    # Get configuration for sshd, service modules types auth and account
    #
    sshd_conf=`egrep "(auth|account)" ${{PAM_CONF_DIR}}/sshd 2> /dev/null`
    if [ $? -ne 0 ]; then
        # No match found
        # sshd not explicitly configured.
        # Use passwd

#ifndef ULINUX
        sshd_conf=`printf "${{pam_dir_passwd}}"`
#else
        if [ -e "/etc/debian_version" ]; then
            sshd_conf=`printf "${{pam_dir_passwd_ubuntu}}"`
        elif [ ! -e "/etc/sysconfig/networking" ] && [ ! -e"/etc/sysconfig/network-scripts"]; then
            sshd_conf=`printf "${{pam_dir_passwd_suse}}"`
        else
            sshd_conf=`printf "${{pam_dir_passwd_redhat}}"`
        fi
#endif
    fi

    omi_conf=$sshd_conf
}

#
#
# ConfigurePAM
#
#
ConfigurePAM_file() {
    #
    # First check if omi is already configured in pam.conf
    #
    grep -s "^[# ]*omi" ${{PAM_CONF_FILE}} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        # Match found
        # Looks like omi is already configured
        echo "omi already configured"
        return 0
    fi
    
    GetNewPAMConfig_file

    #
    # Only update pam.conf if we are returning some new configuration
    if [ "$omi_conf" ]; then
        # Write the final configuration to pam.conf
        #
        # copy file first and modify this copy, so in case of low disk space we preserve the original file
        cp ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.scx-copy && printf "${{PAM_COMMENT}}\n$omi_conf\n${{PAM_COMMENT_CLOSING}}\n" >> ${{PAM_CONF_FILE}}.scx-copy
        if [ $? -ne 0 ]; then
            echo "can't update file ${{PAM_CONF_FILE}}.scx-copy"
            rm -f ${{PAM_CONF_FILE}}.scx-copy
            return 1
        fi
        # verify that complete file was written
        grep "${{PAM_COMMENT_CLOSING}}" ${{PAM_CONF_FILE}}.scx-copy > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "can't update file ${{PAM_CONF_FILE}}.scx-copy"
            rm -f ${{PAM_CONF_FILE}}.scx-copy
            return 1
        fi
        # use move to substitute original file with verified copy
        mv ${{PAM_CONF_FILE}}.scx-copy ${{PAM_CONF_FILE}}
        if [ $? -ne 0 ]; then
            echo "can't replace ${{PAM_CONF_FILE}}"
            return 1
        fi
    fi
}

ConfigurePAM_dir() {
    #
    # First check if omi is already configured
    #
    if [ -f ${{PAM_CONF_DIR}}/omi ]; then
        # Match found
        # Looks like omi is already configured
        echo "omi already configured"
        return 0
    fi

    GetNewPAMConfig_dir

    echo "#%%PAM-1.0
${{PAM_COMMENT}}
$omi_conf" > ${{PAM_CONF_DIR}}/omi
    if [ $? -ne 0 ]; then
        echo "can't create ${{PAM_CONF_DIR}}/omi"
        return 1
    fi
}


ConfigurePAM() {
    #
    # Check if pam is configured with single
    # configuration file or with configuration
    # directory.
    #
    if [ -s ${{PAM_CONF_FILE}} ]; then
        ConfigurePAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        ConfigurePAM_dir
    else
        # No pam configuration.
        echo "PAM does not seem to be configured."
        echo "Checked both ${{PAM_CONF_FILE}} and ${{PAM_CONF_DIR}}."
        return 1
    fi
    return 0
}

GetCurrentPAMConfig_file() {
    omi_current_conf=`grep "^[#\t]*omi" ${{PAM_CONF_FILE}}`
}

GetCurrentPAMConfig_dir() {
    omi_current_conf=`cat ${{PAM_CONF_DIR}}/omi | grep -v "#%%PAM-1.0" | grep -v "${{PAM_COMMENT}}"`
}

#
#
# UnconfigurePAM
#
#
UnconfigurePAM_file() {
    # Configured with single file

#if PF == SUNOS
    GetNewPAMConfig_file
    GetCurrentPAMConfig_file
    if [ "$omi_conf" != "$omi_current_conf" ]; then
        # It looks like the configuration has been changed since
        # installation or at least would change if we did a reinstall
        # Safest to leave the configuration as is.
        return 0
    fi
#endif

    #
    # Get all lines except omi configuration
    #
    pam_configuration=`grep -v "^[#	]*omi" ${{PAM_CONF_FILE}} | grep -v "${{PAM_COMMENT}}" | grep -v "${{PAM_COMMENT_CLOSING}}"`
    if [ $? -ne 0 ]; then
        # omi not configured in PAM
        return 0
    fi
    
    #
    # Write it back (to the copy first)
    #
    cp -p ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.tmp
    echo "$pam_configuration" > ${{PAM_CONF_FILE}}.tmp
    if [ $? -ne 0 ]; then
        echo "can't write to ${{PAM_CONF_FILE}}.tmp"
        return 1
    fi
    mv ${{PAM_CONF_FILE}}.tmp ${{PAM_CONF_FILE}}
    if [ $? -ne 0 ]; then
        echo "can't replace ${{PAM_CONF_FILE}}"
        return 1
    fi

}

UnconfigurePAM_dir() {
    # Configured with directory
    if [ -f ${{PAM_CONF_DIR}}/omi ]; then

#if PF == SUNOS
        GetNewPAMConfig_dir
        GetCurrentPAMConfig_dir
        if [ "$omi_conf" != "$omi_current_conf" ]; then
            # It looks like the configuration has been changed since
            # installation or at least would change if we did a reinstall
            # Safest to leave the configuration as is.
            return 0
        fi
#endif
        rm -f ${{PAM_CONF_DIR}}/omi
        return 0
    fi

}

UnconfigurePAM() {
    #
    # Check if pam is configured with single
    # configuration file or with configuration
    # directory.
    #
    if [ -s ${{PAM_CONF_FILE}} ]; then
        UnconfigurePAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        UnconfigurePAM_dir
    fi
}

%Postinstall_100
#include PAM_Functions
ConfigurePAM

%Postinstall_200
# check if systemd is installed
pidof systemd 1> /dev/null 2> /dev/null
if [ $? -eq 0 ]; then
    # systemd
    cp /opt/omi/bin/omiserver.systemd /usr/lib/systemd/system/omiserver.service
else
    # sysv
    cp /opt/omi/bin/omiserver.sysv /etc/init.d/omiserver
    /usr/lib/lsb/install_initd /etc/init.d/omiserver
fi

%Preuninstall_100
#include PAM_Functions
UnconfigurePAM

%Preuninstall_200
# stop omiserver if it is running
if [ -f /etc/init.d/omiserver ]; then
    /etc/init.d/omiserver stop 1> /dev/null 2> /dev/null
else
    systemctl stop omiserver 1> /dev/null 2> /dev/null
fi

%Preuninstall_300
# remove sysv and systemd entries for omiserver
if [ -f /etc/init.d/omiserver ]; then
    /usr/lib/lsb/remove_initd omiserver
    rm -f /etc/init.d/omiserver
else
    rm -f /usr/lib/systemd/system/omiserver.service
fi
