// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::System::Boot" ), 
    Description ( 
       "BootSettingData is a set of settings that apply to system "
       "boot. An example of usage of this class is to hold several "
       "BIOS, NVRAM, firmware or system settings, typically seen in "
       "the BIOS setup screens. These settings would need to be "
       "modified by the system as part of the boot process. Since, it "
       "is often not possible to intercept the boot process to apply "
       "these settings, users can set these a priori in the instance "
       "associated with the selected BootSourceSetting, thereby "
       "instructing the system to apply them during the next system "
       "reboot." )]
class CIM_BootSettingData : CIM_SettingData {

      [Description ( 
          "OwningEntity identifies the vendor or organization that "
          "defines the contained boot settings. In order to ensure "
          "uniqueness, the value of OwningEntity MUST be "
          "constructed using the following algorithm: \n"
          "<OrgID>[:<LocalID>] \n"
          "where <OrgID> MUST include a copyrighted, trademarked or "
          "otherwise unique name that is owned by the entity "
          "creating/defining the BootSettingData, or is a "
          "registered ID that is assigned to the entity by a "
          "recognized global authority (This is similar to the "
          "<Schema Name>_<Class Name> structure of Schema class "
          "names.) In addition, <OrgID> MUST NOT contain a colon "
          "(\':\'). \n"
          "<LocalID> is optional and, when used, MUST be unique "
          "within the scope of the <OrgID>. When a <LocalID> is "
          "present, a colon MUST appear between <OrgID> and "
          "<LocalID>. For DMTF defined instances, the algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string OwningEntity;


};
