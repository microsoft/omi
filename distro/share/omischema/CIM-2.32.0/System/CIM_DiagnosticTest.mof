// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.11.0" ), 
    UMLPackagePath ( "CIM::System::Diagnostics" ), 
    Description ( 
       "The CIM_DiagnosticTest class represents the framework for "
       "running diagnostic tests. Specific diagnostic tests may be "
       "defined by subclassing and/or instantiating this object. To "
       "provide more detail for a type of test(s) (i.e, additional "
       "properties and methods), subclassing is appropriate. \n"
       "When a DiagnosticTest can be simultaneously executed against "
       "several elements, then DiagnosticTest may launch a ConcreteJob "
       "to represent each execution." )]
class CIM_DiagnosticTest : CIM_DiagnosticService {

      [Description ( 
          "The descriptions for each Characteristic are below: \n"
          "\n"
          "* \"Is Exclusive\" (value=2) is specified for the test "
          "module only if the diagnostic cannot run more than one "
          "test at a time, regardless of how many SystemElements "
          "are supported. Typically, this occurs when hardware or "
          "software constraints prevent the test from running as "
          "multiple, concurrent instances. If the diagnostic can be "
          "run against multiple SystemElements, but only once per "
          "Element, then set the IsExclusiveForMSE boolean property "
          "on the appropriate instances of DiagnosticTestForMSE. \n"
          "\n"
          "* If \"Is Interactive\" (value=3) is set, then the "
          "diagnostic displays a message either before, during or "
          "after testing. \n"
          "\n"
          "* Set \"Is Destructive\" (value=4) if the diagnostic "
          "will destroy data, or reconfigure the Element that is "
          "being tested. \n"
          "\n"
          "* \"Is Risky\" (value=5) indicates that data loss may "
          "occur if the test is interrupted. Some tests make copies "
          "of data, perform the test, and restore the data "
          "returning the tested entity to its previous "
          "configuration. If the test is interrupted, then loss of "
          "data or reconfiguration of the tested "
          "ManagedSystemElement may occur. \n"
          "\n"
          "* If \"Is Package\" (value=6) is set, this test is "
          "actually a set of lower level diagnostics, that are "
          "packaged together by the test. This packaging is "
          "implemented by the diagnostic test, not aggregated by "
          "CIM. Information and results associated with the "
          "individual tests in the package may be requested by "
          "using the \"Subtests\" value in the "
          "DiagnosticSetting.LogOptions array. \n"
          "\n"
          "(value=7) was \"Supports PercentOfTestCoverage\" in "
          "Version 2.6. Value = 7 is being deprecated. Instead, it "
          "should be described in DiagnosticServiceCapabilities. \n"
          "\n"
          "\"Is Synchronous\" (value=8) indicates that this "
          "diagnostic service will complete before the "
          "RunDiagnostic method returns to the caller. A Job is "
          "still created that can be accessed by the client for "
          "accounting purposes, but the ability to track progress "
          "and status of the Job are lost. Additionally, in certain "
          "environments, the client may be \"blocked\" from further "
          "action until the service completes. \n"
          "\"Media Required\" (value=9) indicates that this "
          "diagnostic service requires that media be inserted into "
          "the device in order to perform the service. \"Additional "
          "Hardware Required\" (value=10) indicates that this "
          "diagnostic service requires that some additional "
          "hardware is installed (e.g., wrap plug) in order to "
          "perform the service." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10" }, 
       Values { "Unknown", "Other", "Is Exclusive", 
          "Is Interactive", "Is Destructive", "Is Risky", 
          "Is Package", "Reserved", "Is Synchronous", 
          "Media Required", "Additional Hardware Required" }, 
       ModelCorrespondence { 
          "CIM_DiagnosticTest.OtherCharacteristicsDescriptions" }]
   uint16 Characteristics[];

      [Deprecated { 
          "CIM_DiagnosticTest.OtherCharacteristicsDescriptions" }, 
       Description ( 
          "Provides additional information for the Characteristic "
          "when its value is set to 1 (\"Other\")." ), 
       ModelCorrespondence { "CIM_DiagnosticTest.Characteristics" }]
   string OtherCharacteristicDescription;

      [Description ( 
          "OtherCharacteristicsDescriptions is a Bag array that "
          "contains an element with additional information for each "
          "Characteristics element with a value of 1 (\"Other\")." ), 
       ModelCorrespondence { "CIM_DiagnosticTest.Characteristics" }]
   string OtherCharacteristicsDescriptions[];

      [Deprecated { "CIM_Service.Started" }, 
       Description ( 
          "This property is being deprecated. The boolean Started "
          "property inherited from CIM_Service should be used "
          "instead. \n"
          "If this test is currently being performed, the InUse "
          "property is set to TRUE. To determine which "
          "ManagedSystem Element is being tested, query the "
          "DiagnosticResult objects associated with this test "
          "(query DiagnosticResultForTest), and for which the "
          "TestState equals 4 (\"In Progress\"). The "
          "DiagnosticResult object is associated with the System "
          "Element under test, using DiagnosticResultForMSE." )]
   boolean IsInUse;

      [Deprecated { "CIM_ServiceAffectsElement" }, 
       Description ( 
          "This property is being deprecated and replaced with a "
          "more general method for indicating Managed Elements that "
          "are affected by this Test. The DiagnosticService parent "
          "has a ServiceAffectsElement association to a Managed "
          "Element for this purpose. \n"
          "The \"Expensive\" qualifier can be applied to this class "
          "and its RunTest method. If so, the ResourcesUsed "
          "property describes the resources that are capitalized, "
          "based on a default setup for the test. Multiple "
          "resources can be specified since the property is an "
          "array." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20", "21", "22", "23", "24", "25", "26", "27", "28" }, 
       Values { "CPU", "Memory", "Hard Disk", "CDROM", "Floppy", 
          "PCI Bus", "USB Bus", "1394 Bus", "SCSI Bus", "IDE Bus", 
          "Network", "ISA Bus", "EISA Bus", "VESA Bus", 
          "PCMCIA Bus", "CardBus", "Access.bus", "NuBus", "AGP", 
          "VME Bus", "Sbus IEEE 1396-1993", "MCA Bus", "GIO Bus", 
          "XIO Bus", "HIO Bus", "PMC Bus", "SIO Bus" }]
   uint16 ResourcesUsed[];

      [Description ( 
          "The descriptions for each test type are below: \n"
          "\n"
          "* If \"Functional\" (value=2) is set, this tests one, "
          "more or all the functionality of the element. \n"
          "\n"
          "* If \"Stress\" (value=3) is set, this test is a stress "
          "test or exerciser for the element. \n"
          "\n"
          "* If \"Health Check\" (value=4) is set, this test "
          "validates the current health of the element. \n"
          "\n"
          "* If \"Access Test\" (value=5) is set, this test "
          "verifies the element is accessible to the system and "
          "user. This would include access through the OS as a user "
          "would access the element. \n"
          "\n"
          "* If \"Media Verify\" (value=6) is set, this test "
          "verifies the media for the element. This does not "
          "validate that specific data is correctly written on the "
          "media or even if data can be written to the media, but "
          "verifies that the media itself has no faults." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "Functional", "Stress", 
          "Health Check", "Access Test", "Media Verify", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticTest.OtherTestTypesDescriptions" }]
   uint16 TestTypes[];

      [Description ( 
          "OtherTestTypesDescriptions is an array that contains an "
          "element with additional information for each TestTypes "
          "element with a value of 1 (\"Other\")." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_DiagnosticTest.TestTypes" }]
   string OtherTestTypesDescriptions[];


      [Deprecated { "CIM_DiagnosticService.RunDiagnostic" }, 
       Description ( 
          "This method is being deprecated and replaced by the "
          "RunDiagnostic method in the DiagnosticService class. \n"
          "The RunTest method executes this test for the specified "
          "ManagedSystemElement. The use of this method has been "
          "deprecated. Instead, the RunDiagnostic method (inherited "
          "from DiagnosticService) should be used. \n"
          "The RunTest method executes this test for the specified "
          "ManagedSystemElement (defined using the SystemElement "
          "input parameter). Results of the test are stored in a "
          "Diagnostic Result object, a reference to which is "
          "returned as the Result output parameter. How the test "
          "should execute, i.e. its settings, is defined in a "
          "DiagnosticSetting object (or by a subclass of "
          "DiagnosticSetting). A reference to a Setting object is "
          "specified using the Setting input parameter. If a "
          "reference is not passed into the method, then a default "
          "DiagnosticSetting may be used. This default Setting is "
          "associated with the DiagnoticTest using the "
          "DefaultSetting relationship of the Core Model. \n"
          "When RunTest starts execution, the settings, which are "
          "time sensitive, should be evaluated and captured. This "
          "is suggested since the DiagnosticSetting object can be "
          "modified at any time, and therefore the current test "
          "settings could be lost. \n"
          "The method\'s return codes are expected to adhere to the "
          "XML return codes as they are introduced. Currently, the "
          "standard return values are: \n"
          "0 = OK (function succeeded, but the test itself may have "
          "failed \n"
          "1 = Unspecified Error (function failed for unspecified "
          "reasons) \n"
          "2 = Not Implemented (function is not implemented for "
          "this instance) \n"
          "3 = Out Of Resources (component could not allocate "
          "required resources, e.g. memory, disk space, etc.) \n"
          "In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \'translated\' "
          "may also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 RunTest(
         [IN, Description ( 
             "The ManagedSystemElement on which the test will run."
              )]
      CIM_ManagedSystemElement REF SystemElement, 
         [IN, Description ( 
             "How the test should execute, i.e. its settings, is "
             "defined in a DiagnosticSetting object (or by a "
             "subclass of DiagnosticSetting). A reference to a "
             "Setting object is specified using the Setting "
             "input parameter. If a reference is not passed into "
             "the method, then a default DiagnosticSetting may "
             "be used. This default Setting is associated with "
             "the DiagnoticTest using the DefaultSetting "
             "relationship of the Core Model." )]
      CIM_DiagnosticSetting REF Setting, 
         [IN ( false ), OUT, Description ( 
             "Results of the test are stored in a "
             "DiagnosticResult object, a reference to which is "
             "returned as the Result output parameter." )]
      CIM_DiagnosticResult REF Result);

      [Deprecated { "CIM_Log.ClearLog" }, 
       Description ( 
          "This method is deprecated in favor of using the "
          "corresponding functionality contained in the Log class, "
          "this is consistant with the deprecation of the Result "
          "class in favor of Log. \n"
          "Execution of this method will delete all instances of "
          "the DiagnosticResultForMSE object, for this "
          "DiagnosticTest and the specified ManagedSystemElement "
          "(defined using the SystemElement input parameter). The "
          "DiagnosticResults referenced in the "
          "DiagnosticResultForMSE instances will be deleted. Also "
          "the association DiagnosticResultForTest that refers to "
          "the DiagnosticResult object, and this test will be "
          "deleted. \n"
          "One output parameter is defined - ResultsNotCleared - "
          "which is a string array that lists the keys of the "
          "DiagnosticResults which could not be deleted. This "
          "information enables those Results to be revisited and "
          "either manually removed, or other corrective action "
          "taken. \n"
          "The method\'s return codes are expected to adhere to the "
          "XML return codes as they are introduced. Currently, the "
          "standard return values are: \n"
          "0 = OK (function succeeded, but the test itself may have "
          "failed) \n"
          "1 = Unspecified Error (function failed for unspecified "
          "reasons) \n"
          "2 = Not Implemented (function is not implemented for "
          "this instance) \n"
          "3 = Out Of Resources (component could not allocate "
          "required resources, e.g. memory, disk space, etc.) \n"
          "In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \'translated\' "
          "may also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 ClearResults(
         [IN, Description ( 
             "The Managed System Element for which results will be cleared."
              )]
      CIM_ManagedSystemElement REF SystemElement, 
         [IN ( false ), OUT, Description ( 
             "A string array that lists the keys of the "
             "DiagnosticResults which could not be deleted." )]
      string ResultsNotCleared[]);

      [Deprecated { "CIM_ConcreteJob.RequestStateChange" }, 
       Description ( 
          "After invocation of this method and its completion, the "
          "specified test(s) will be discontinued for the indicated "
          "ManagedSystemElement (defined by the SystemElement input "
          "parameter). The test to discontinue is specified using "
          "the Result input parameter. If all instances of this "
          "test should be stopped for the SystemElement, then the "
          "Result reference should be NULL. Upon completion of the "
          "method, test status and other information (such as "
          "PercentComplete) will be stored in the DiagnosticResult "
          "instance defined by the Result input parameter. The "
          "output parameter, TestingStopped, is used as follows: \n"
          "Set to TRUE if testing was successfully stopped. \n"
          "Set to FALSE if the current test(s) can not be stopped. \n"
          "If set to FALSE, testing will stop when the diagnostic "
          "is able to do so safely. To determine if/when the "
          "testing is stopped, check the TestState property in the "
          "DiagnosticResult instance defined by the Result "
          "parameter. TestState will change from \"In Progress\" to "
          "\"Stopped\" (from 4 to 5). \n"
          "The method\'s return codes are expected to adhere to the "
          "XML return codes as they are introduced. Currently, the "
          "standard return values are: \n"
          "0 = OK (function succeeded, but the test itself may have "
          "failed \n"
          "1 = Unspecified Error (function failed for unspecified "
          "reasons) \n"
          "2 = Not Implemented (function is not implemented for "
          "this instance) \n"
          "3 = Out Of Resources (component could not allocate "
          "required resources, e.g. memory, disk space, etc.) \n"
          "In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \'translated\' "
          "may also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 DiscontinueTest(
         [IN, Description ( 
             "Testing will be discontinued for the indicated "
             "ManagedSystemElement defined by the SystemElement "
             "input parameter." )]
      CIM_ManagedSystemElement REF SystemElement, 
         [IN, Description ( 
             "The test to discontinue is specified using the "
             "Result input parameter." )]
      CIM_DiagnosticResult REF Result, 
         [IN ( false ), OUT, Description ( 
             "TestingStopped, is set to TRUE if testing was "
             "successfully stopped. It is set to FALSE if the "
             "current test(s) can not be stopped. If set to "
             "FALSE, testing will stop when the diagnostic is "
             "able to do so safely. To determine if/when the "
             "testing is stopped, check the TestState property "
             "in the DiagnosticResult instance defined by the "
             "Result parameter. TestState will change from \"In "
             "Progress\" to \"Stopped\" (from 4 to 5)." )]
      boolean TestingStopped);

};
