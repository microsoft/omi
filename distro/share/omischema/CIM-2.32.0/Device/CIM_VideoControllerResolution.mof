// Copyright (c) 2005 DMTF.  All rights reserved.
   [Deprecated { "CIM_VideoHeadResolution" }, 
    Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Device::Controller" ), 
    Description ( 
       "Note: The use of the CIM_VideoControllerResolutionclass has "
       "been deprecated in lieu of CIM_VideoHeadResolution. \n"
       "Deprecated description: \n"
       "VideoControllerResolution describes the various video modes "
       "that a VideoController can support. Video modes are defined by "
       "the possible horizontal and vertical resolutions, refresh "
       "rate, scan mode, and number of color settings that are "
       "supported by a Controller. The actual resolutions and so on "
       "that are in use are the values specified in the "
       "VideoController object." )]
class CIM_VideoControllerResolution : CIM_Setting {

      [Deprecated { "No value" }, 
       Key, Override ( "SettingID" ), 
       Description ( 
          "The inherited SettingID serves as part of the key for a "
          "VideoControllerResolution instance." ), 
       MaxLen ( 256 )]
   string SettingID;

      [Deprecated { "CIM_VideoHeadResolution.HorizontalResolution" }, 
       Description ( 
          "The horizontal resolution of the Controller in Pixels." ), 
       Units ( "Pixels" ), 
       MappingStrings { "MIF.DMTF|Monitor Resolutions|002.2" }, 
       ModelCorrespondence { 
          "CIM_VideoController.CurrentHorizontalResolution" }, 
       PUnit ( "pixel" )]
   uint32 HorizontalResolution;

      [Deprecated { "CIM_VideoHeadResolution.VerticalResolution" }, 
       Description ( 
          "The vertical resolution of the Controller in Pixels." ), 
       Units ( "Pixels" ), 
       MappingStrings { "MIF.DMTF|Monitor Resolutions|002.3" }, 
       ModelCorrespondence { 
          "CIM_VideoController.CurrentVerticalResolution" }, 
       PUnit ( "pixel" )]
   uint32 VerticalResolution;

      [Deprecated { "CIM_VideoHeadResolution.RefreshRate" }, 
       Description ( 
          "Refresh rate in hertz. If a range of rates is supported, "
          "use the MinRefreshRate and MaxRefreshRate properties, "
          "and set RefreshRate (this property) to 0." ), 
       Units ( "Hertz" ), 
       MappingStrings { "MIF.DMTF|Monitor Resolutions|002.4" }, 
       ModelCorrespondence { "CIM_VideoController.CurrentRefreshRate" }, 
       PUnit ( "hertz" )]
   uint32 RefreshRate;

      [Deprecated { "CIM_VideoHeadResolution.MinRefreshRate" }, 
       Description ( 
          "Minimum refresh rate in hertz, when a range of rates is "
          "supported at the specified resolutions." ), 
       Units ( "Hertz" ), 
       MappingStrings { "MIF.DMTF|Monitor Resolutions|002.6" }, 
       ModelCorrespondence { "CIM_VideoController.MinRefreshRate" }, 
       PUnit ( "hertz" )]
   uint32 MinRefreshRate;

      [Deprecated { "CIM_VideoHeadResolution.MaxRefreshRate" }, 
       Description ( 
          "Maximum refresh rate in hertz, when a range of rates is "
          "supported at the specified resolutions." ), 
       Units ( "Hertz" ), 
       MappingStrings { "MIF.DMTF|Monitor Resolutions|002.7" }, 
       ModelCorrespondence { "CIM_VideoController.MaxRefreshRate" }, 
       PUnit ( "hertz" )]
   uint32 MaxRefreshRate;

      [Deprecated { "CIM_VideoHeadResolution.ScanMode" }, 
       Description ( 
          "Integer that indicates whether the Controller operates "
          "in interlaced (value=5) or non-interlaced (value=4) "
          "mode." ), 
       ValueMap { "1", "2", "3", "4", "5" }, 
       Values { "Other", "Unknown", "Not Supported", 
          "Non-Interlaced Operation", "Interlaced Operation" }, 
       MappingStrings { "MIF.DMTF|Monitor Resolutions|002.5" }, 
       ModelCorrespondence { "CIM_VideoController.CurrentScanMode" }]
   uint16 ScanMode;

      [Deprecated { "CIM_VideoHeadResolution.NumberOfColors" }, 
       Description ( 
          "Number of colors that are supported at the current resolutions."
           ), 
       ModelCorrespondence { 
          "CIM_VideoController.CurrentNumberOfColors" }]
   uint64 NumberOfColors;


};
