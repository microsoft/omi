// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="DMTFCR01530.000" type ="add">Correct ValueMaps</
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// <change cr="CIMCoreCR00904" type="add">Correct descriptions
// use of MAY and MUST to may and shall.</change>
// ==================================================================
//  CIM_LogicalDisk
// ==================================================================
   [Version ( "2.15.0" ), 
    UMLPackagePath ( "CIM::Device::StorageExtents" ), 
    Description ( 
       "A LogicalDisk is a presentation of a contiguous range of "
       "logical blocks that is identifiable by applications such as "
       "filesystems via the Name field. (DeviceID (key) may use the "
       "same name or some other unique text such as a UUID.) For "
       "example in a Windows environment, the Name field may contain a "
       "drive letter. In a Unix environment, it may contain the access "
       "path (for example, \'/dev/...\'); and in a NetWare "
       "environment, may contain the volume name. LogicalDisks are "
       "typically built on a DiskPartition or other LogicalDisks (for "
       "instance, those exposed by a software volume manager). "
       "However, it can be based on other StorageExtents, like "
       "CIM_Memory, in the case of a RAM disk. \n"
       "\n"
       "LogicalDisks SHOULD set the \'Exported\' value in "
       "ExtentStatus[] if they are intended for application use." )]
class CIM_LogicalDisk : CIM_StorageExtent {

      [Override ( "NameFormat" ), 
       Description ( 
          "LogicalDisk names shall use OS Device Name format." ), 
       ValueMap { "1", "12" }, 
       Values { "Other", "OS Device Name" }]
   uint16 NameFormat = 12;

      [Override ( "NameNamespace" ), 
       Description ( 
          "LogicalDisk names shall use OS Device Namespace." ), 
       ValueMap { "1", "8" }, 
       Values { "Other", "OS Device Namespace" }]
   uint16 NameNamespace = 8;


};
