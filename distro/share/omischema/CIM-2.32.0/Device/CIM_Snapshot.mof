// Copyright (c) 2005 DMTF.  All rights reserved.
   [Deprecated { "No value" }, 
    Version ( "2.7.0" ), 
    UMLPackagePath ( "CIM::Device::SccExtents" ), 
    Description ( 
       "Deprecated. Snapshots are now modeled in a more abstrct way "
       "using StorageExtent and StorageSynchronized. \n"
       "The Snapshot class is an optional construct. It can be used to "
       "represent an Extent that contains a full copy of another "
       "Extent, or the changes to that Extent when performing a "
       "delta-based (delta before or delta after) copy. \n"
       "Snapshot\'s definition in CIM is not equivalent to the act of "
       "creating a volume or file-based snapshot, or a point in time "
       "copy. It is at a much lower level and represents the use of "
       "storage to hold a copied image of an Extent, or to hold "
       "changes to an Extent. Use of the Snapshot object when making a "
       "full copy is only recommended if the purpose is to describe "
       "the existence of a copy. (This use will be very infrequent.) "
       "The problem with describing an Extent solely as a \'snapshot\' "
       "is that when the snapshot/copy is broken, the object must be "
       "destroyed. Typically, this object still holds valid data, and "
       "would have to be reinstantiated. If the \'full copy\' object "
       "is to be treated as a StorageVolume or more general Extent, "
       "then it should be modeled as such from the beginning - i.e., "
       "not as an instance of Snapshot but as an instance of a generic "
       "StorageExtent or StorageVolume. In this case, the Synchronized "
       "association would be used to describe that one StorageExtent "
       "is synchronized with another. \n"
       "When describing a delta-based snapshot/point in time copy, the "
       "Snapshot object represents the store holding the before/after "
       "image changes to the original Extent. For example, when doing "
       "a \'delta before\' Snapshot, the resultant target would be "
       "modeled as a StorageExtent that is BasedOn the original Extent "
       "and the instance of Snapshot (that holds the changes to the "
       "original Extent)." )]
class CIM_Snapshot : CIM_StorageExtent {

      [Deprecated { "CIM_Synchronized.SyncMaintained" }, 
       Description ( "True indicates that the snapshot is synced." )]
   boolean IsSynced;

      [Deprecated { "CIM_Synchronized.WhenSynced" }, 
       Description ( 
          "The time stamp indicating when the sync occurred." )]
   datetime SyncTime;


};
